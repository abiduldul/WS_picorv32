
There are no discarded input sections

Memory Configuration

Name             Origin             Length             Attributes
ROM              0x00000000         0x01000000         xrw
RAM              0x10000000         0x00000100         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map


.text           0x00000000      0x1a0
 *(.init)
 .init          0x00000000       0x8c boot.o
                0x00000000                start
 *(.fini)
 *(.text)
 .text          0x0000008c        0x0 boot.o
 .text          0x0000008c       0x98 ram_init.o
                0x0000008c                ram_init
 .text          0x00000124       0x7c main.o
                0x00000124                main
 *(.text.*)
 *(.rodata)
 *(.rodata.*)
                0x000001a0                        . = ALIGN (0x8)
                0x000001a0                        _etext = .
                0x000001a0                        _la_data = LOADADDR (.data)

.rela.dyn       0x000001a0        0x0
 .rela.init     0x000001a0        0x0 boot.o
 .rela.text     0x000001a0        0x0 boot.o

.data           0x10000000        0x0 load address 0x000001a0
                0x10000000                        _sdata = .
 *(.data)
 .data          0x10000000        0x0 boot.o
 .data          0x10000000        0x0 ram_init.o
 .data          0x10000000        0x0 main.o
 *(.data.*)

.sdata          0x10000000        0x0 load address 0x000001a0
 *(.sdata*)
                0x10000800                        //__global_pointer$ = (. + 0x800)
                0x10000000                        _edata = .

.bss            0x10000000        0x0 load address 0x000001a0
                0x10000000                        _sbss = .
 *(.bss)
 .bss           0x10000000        0x0 boot.o
 .bss           0x10000000        0x0 ram_init.o
 .bss           0x10000000        0x0 main.o
 *(.bss.*)
 *(COMMON)
                0x10000000                        . = ALIGN (0x8)
                0x10000000                        _ebss = .

.sbss           0x000001a0        0x0
                0x000001a0                        _sbss_start = .
 *(.sbss*)
 *(.sbss.*)
                0x000001a0                        . = ALIGN (0x8)
                0x000001a0                        _sbss_end = .
                0x000001a0                        . = ALIGN (0x8)
                0x000001a0                        _end = .
                0x00000080                        _stack_size = 0x80
                0x10000100                        _stack_top = (ORIGIN (RAM) + LENGTH (RAM))
                0x10000080                        _stack_bottom = (_stack_top - _stack_size)
                0x00000001                        ASSERT ((_end <= _stack_bottom), Error: Heap collides with stack)
LOAD boot.o
LOAD ram_init.o
LOAD main.o
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/rv32i/ilp32/libgcc.a
START GROUP
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/../../../../riscv-none-elf/lib/rv32i/ilp32/libc.a
END GROUP
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/rv32i/ilp32/libgcc.a
START GROUP
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/rv32i/ilp32/libgcc.a
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/../../../../riscv-none-elf/lib/rv32i/ilp32/libc.a
LOAD /home/bid/riscv-toolchain/riscv-none-elf-gcc/14.2.0-3.1/.content/bin/../lib/gcc/riscv-none-elf/14.2.0/../../../../riscv-none-elf/lib/rv32i/ilp32/libnosys.a
END GROUP
OUTPUT(program.elf elf32-littleriscv)

.riscv.attributes
                0x00000000       0x1c
 .riscv.attributes
                0x00000000       0x1a boot.o
 .riscv.attributes
                0x0000001a       0x1c ram_init.o
 .riscv.attributes
                0x00000036       0x1c main.o

.comment        0x00000000       0x33
 .comment       0x00000000       0x33 ram_init.o
                                 0x34 (size before relaxing)
 .comment       0x00000033       0x34 main.o

.note.GNU-stack
                0x00000000        0x0
 .note.GNU-stack
                0x00000000        0x0 ram_init.o
 .note.GNU-stack
                0x00000000        0x0 main.o

.debug_line     0x00000000      0x2be
 .debug_line    0x00000000      0x10a boot.o
 .debug_line    0x0000010a       0xcc ram_init.o
 .debug_line    0x000001d6       0xe8 main.o

.debug_line_str
                0x00000000      0x126
 .debug_line_str
                0x00000000      0x126 boot.o
                                 0x3d (size before relaxing)
 .debug_line_str
                0x00000126      0x164 ram_init.o
 .debug_line_str
                0x00000126      0x158 main.o

.debug_info     0x00000000      0x203
 .debug_info    0x00000000       0x25 boot.o
 .debug_info    0x00000025      0x106 ram_init.o
 .debug_info    0x0000012b       0xd8 main.o

.debug_abbrev   0x00000000      0x110
 .debug_abbrev  0x00000000       0x14 boot.o
 .debug_abbrev  0x00000014       0x83 ram_init.o
 .debug_abbrev  0x00000097       0x79 main.o

.debug_aranges  0x00000000       0x60
 .debug_aranges
                0x00000000       0x20 boot.o
 .debug_aranges
                0x00000020       0x20 ram_init.o
 .debug_aranges
                0x00000040       0x20 main.o

.debug_str      0x00000000      0x134
 .debug_str     0x00000000      0x134 boot.o
                                 0x4b (size before relaxing)
 .debug_str     0x00000134      0x11d ram_init.o
 .debug_str     0x00000134       0xf1 main.o

.debug_frame    0x00000000       0x64
 .debug_frame   0x00000000       0x38 ram_init.o
 .debug_frame   0x00000038       0x2c main.o
